package supr.rachl.ftc.defcon2014;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import supr.rachl.ftc.defcon2014.CampaignService.sendReportServerParams;

import android.os.AsyncTask;
import android.util.Log;

public class JSONParser {

	private static final String DEBUG_TAG = "sr_defcon_JSONParser";

	static InputStream is = null;
	static JSONObject jObj = null;
	static String json = "";

	// constructor
	public JSONParser() {
	}

	// function get json from url
	public JSONObject makeHttpRequest(String url, List<NameValuePair> params) throws IOException {

		class sendReportServer extends AsyncTask<sendReportServerParams, Void, String> {
			@Override
			protected String doInBackground(sendReportServerParams... params) {
				String response = "";			

				String url = params[0].sendReporturl;
				String key1 = params[0].key1;
				String key2 = params[0].key2;
				String key3 = params[0].key3;

				List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
				nameValuePairs.add(new BasicNameValuePair("key1", key1));
				nameValuePairs.add(new BasicNameValuePair("key2", key2));
				nameValuePairs.add(new BasicNameValuePair("key3", key3));

				DefaultHttpClient client = new DefaultHttpClient();
				//Use some credentials
				UsernamePasswordCredentials creds = new UsernamePasswordCredentials("username", "password");
				client.getCredentialsProvider().setCredentials(new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT), creds);

				try {
					HttpPost httpPost = new HttpPost(url);
					httpPost.setHeader("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
					httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, "UTF-8"));
					HttpResponse execute = client.execute(httpPost);
					InputStream content = execute.getEntity().getContent();
					BufferedReader buffer = new BufferedReader(new InputStreamReader(content));
					String s = "";
					while ((s = buffer.readLine()) != null) {
						response += s;
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

				//check if tasks was cancelled
				if (isCancelled()) {
					//Log.i(DEBUG_TAG, "AsynchTask was cancelled");
					return null;
				}
				return response;
			}
			@Override
			protected void onPostExecute(String result) {
				//Log.i(DEBUG_TAG, "sendReportServer response from server: " + result);
			}
		}
		
		try {
			// request method is GET
			DefaultHttpClient httpClient = new DefaultHttpClient();
			String paramString = URLEncodedUtils.format(params, "utf-8");
			url += "?" + paramString;
			HttpGet httpGet = new HttpGet(url);

			HttpResponse httpResponse = httpClient.execute(httpGet);
			HttpEntity httpEntity = httpResponse.getEntity();
			is = httpEntity.getContent();
		} catch (IllegalStateException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					is, "iso-8859-1"), 8);
			StringBuilder sb = new StringBuilder();
			String line = null;
			while ((line = reader.readLine()) != null) {
				sb.append(line + "\n");
			}
			is.close();
			json = sb.toString();
		} catch (Exception e) {
			Log.i(DEBUG_TAG, "Error converting result " + e.toString());
		}

		// try parse the string to a JSON object
		try {
			jObj = new JSONObject(json);
		} catch (JSONException e) {
			Log.i(DEBUG_TAG, "Error parsing data " + e.toString());
		}

		// return JSON String
		return jObj;

	}
}