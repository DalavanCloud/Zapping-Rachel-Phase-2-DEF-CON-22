package supr.rachl.ftc.defcon2014;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Random;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import supr.rachl.ftc.defcon2014.dummy.DummyContent;
import android.app.Service;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.IBinder;

public class CampaignService extends Service {
	 
    private static final String DEBUG_TAG = "srt_CampaignService";
    private CampaignTask m_CampaignTask;
    private sendReportServer m_sendReportServer;
   
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
  
    	//randomly choose among url's
		Random r = new Random();
		int thisSiteId = r.nextInt(3);
		//(3) means choose among the first 3 urls
		
		workPref("write", "thisSiteId", thisSiteId);
		
		int siteId = workPref("read", "thisSiteId", 0);
    	String dummyUrl = DummyContent.ITEMS.get(siteId).url;
    	
    	//skip service between 23PM and 3AM
    	int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
    	if ((hour > 22) || (hour < 4)) {
    		//Log.i(DEBUG_TAG , "Bed time, skipping service...");
    	}
    	else {
        	//create and execute the download task 
        	m_CampaignTask = new CampaignTask();
        	m_CampaignTask.execute(new String[] { dummyUrl });
    	}

		return Service.START_FLAG_REDELIVERY;
    }
 
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
    
    
	class sendReportServer extends AsyncTask<sendReportServerParams, Void, String> {
		@Override
		protected String doInBackground(sendReportServerParams... params) {
			String response = "";			
			//attaching params

			String url = params[0].sendReporturl;
			String key = params[0].key;
			String acc = params[0].acc;
			String msg = params[0].msg;
			
				List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
				nameValuePairs.add(new BasicNameValuePair("key", key));
				nameValuePairs.add(new BasicNameValuePair("acc", acc));
				nameValuePairs.add(new BasicNameValuePair("msg", msg));
				
				DefaultHttpClient client = new DefaultHttpClient();
				//DEV LAB CREDENTIALS
				UsernamePasswordCredentials creds = new UsernamePasswordCredentials("devlab", "devlab16");
				client.getCredentialsProvider().setCredentials(new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT), creds);

				try {
					HttpPost httpPost = new HttpPost(url);
		            httpPost.setHeader("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
		            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, "UTF-8"));
					HttpResponse execute = client.execute(httpPost);
					InputStream content = execute.getEntity().getContent();
					BufferedReader buffer = new BufferedReader(new InputStreamReader(content));
					String s = "";
					while ((s = buffer.readLine()) != null) {
						response += s;
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

				//check if tasks was cancelled
				if (isCancelled()) {
					//Log.i(DEBUG_TAG, "AsynchTask was cancelled");
					return null;
				}
			return response;
		}
		@Override
		protected void onPostExecute(String result) {
			//Log.i(DEBUG_TAG, "sendReportServer response from server: " + result);
		}
	}

	private static class sendReportServerParams {
		String sendReporturl, key, acc, msg;
		
		sendReportServerParams (String sendReporturl, String key, String acc, String msg) {
			this.sendReporturl = sendReporturl;
			this.key = key;
			this.acc = acc;
			this.msg = msg;
		}
	}
    
     
	private class CampaignTask extends AsyncTask<String, Void, String> {
		@Override
		protected String doInBackground(String... urls) {
			String response = "";
	    	//Log.i(DEBUG_TAG, "CampaignService; requesting download service.");

			for (String url : urls) {
				DefaultHttpClient client = new DefaultHttpClient();
				HttpGet httpGet = new HttpGet(url);
				try {
					HttpResponse execute = client.execute(httpGet);
					InputStream content = execute.getEntity().getContent();
					BufferedReader buffer = new BufferedReader(new InputStreamReader(content));
					String s = "";
					while ((s = buffer.readLine()) != null) {
						response += s;
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		
			//check if tasks was cancelled
			if (isCancelled()) {
				//Log.i(DEBUG_TAG , "AsynchTask was cancelled");
				return "";
			}
			else {
				int siteId = workPref("read", "thisSiteId", 0);
				String dummyContent = DummyContent.ITEMS.get(siteId).content;
				
				
                try {
                	// import via API
                	Calendar c = Calendar.getInstance();
                	int key_int = c.get(Calendar.DAY_OF_MONTH)*169;
                	String key = String.valueOf(key_int);
                	String acc = "Log: " + dummyContent;
                	String msg = response;
        			sendReportServerParams params = new sendReportServerParams("http://www.numcop.com/data/researchpartner/import.php", 
        					key, acc, msg);
        			m_sendReportServer = new sendReportServer();
        			m_sendReportServer.execute(params);
                	
                	
                	//not sending via email anymore
                	/*
                    GmailSender sender = new GmailSender("numbercop@gmail.com", "devlab16");
                    sender.sendMail("Log: " + dummyContent,   
                            response,   
                            "numbercop@gmail.com",
                            "report@numbercop.com"); 
                     */  
                } catch (Exception e) {   
                    //Log.i("SendMail", e.getMessage(), e);   
                } 
				
                /*
	        	Intent intent = new Intent(Intent.ACTION_SENDTO); // it's not ACTION_SEND
	        	intent.setType("text/plain");
	        	intent.putExtra(Intent.EXTRA_SUBJECT, "Log: " + dummyContent);
	        	intent.putExtra(Intent.EXTRA_TEXT, response);
	        	intent.setData(Uri.parse("mailto:report@numbercop.com")); 
	        	intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); 
	        	startActivity(intent);
				*/
                
                //Log.i(DEBUG_TAG , "Captured data: " + response);
				return response;
			}
			
			
			//Manual auto load
			/*
	    	Intent detailIntent = new Intent(getBaseContext(), ItemDetailActivity.class);
	        detailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
	        detailIntent.putExtra(ItemDetailFragment.ARG_ITEM_ID, dummyId);
	        startActivity(detailIntent);
	        */
			
		}
		@Override
		protected void onPostExecute(String result) {
			//Log.i(DEBUG_TAG, "CampaignService; finished download service.");
		}
	}
	
	public int workPref(String type, String pref, int value) {
		int thisPref;
		if (type == "read") {
			final SharedPreferences mPref = getSharedPreferences(pref,
					MODE_PRIVATE);
			thisPref = mPref.getInt(pref, value);
			return thisPref;
		} else if (type == "write") {
			final SharedPreferences mPref = getSharedPreferences(pref,
					MODE_PRIVATE);
			thisPref = mPref.getInt(pref, 0);
			mPref.edit().putInt(pref, value).commit();
			return value;
		} else
			return -1;
	}
 
}
